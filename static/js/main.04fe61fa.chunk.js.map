{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["operations","App","useState","drawing","setDrawing","rows","i","push","Array","from","generateEmptyGrid","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbours","forEach","x","y","newI","newK","setTimeout","style","display","gridTemplateColumns","map","col","onMouseEnter","newGrid","onClick","width","height","backgroundColor","undefined","border","fontSize","Math","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04fe61fa.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\nimport produce from 'immer';\n\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n    [0, 1],\n    [0, -1],\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1],\n    [1, 0],\n    [-1, 0]\n];\n\nconst generateEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++ ) {\n        rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n};\n\n\n\nconst App = () => {\n    const [drawing, setDrawing] =useState(0);\n\n    const [grid, setGrid] = useState(() => {\n        return generateEmptyGrid();\n    });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n\n  const runSimulation = useCallback(() => {\n      if (!runningRef.current) {\n          return;\n      }\n\n      setGrid(g => {\n          return produce(g, gridCopy => {\n              for (let i = 0; i < numRows; i++) {\n                  for (let k = 0; k < numCols; k++) {\n                      let neighbours = 0;\n                      operations.forEach(([x, y]) => {\n                          const newI = i + x;\n                          const newK = k + y;\n                          if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                              neighbours += g[newI][newK];\n                          }\n                      });\n\n                      if (neighbours < 2 || neighbours > 3) {\n                          gridCopy[i][k] = 0;\n                      } else if (g[i][k] === 0 && neighbours === 3) {\n                          gridCopy[i][k] = 1;\n                      }\n                  }\n\n              }\n          } )\n      })\n\n\n      // simulate\n      setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 20px)`\n      }}>\n        {grid.map((rows, i) =>\n            rows.map((col, k) =>\n                <div\n                    onMouseEnter={() => {\n                        if (drawing) {\n                            const newGrid = produce(grid, gridCopy => {\n                                gridCopy[i][k] = gridCopy[i][k] ? 0 : 1;\n                            });\n                            setGrid(newGrid)\n                        }\n                    }}\n                    key={`${i}-${k}`}\n                    onClick={() => {\n                      const newGrid = produce(grid, gridCopy => {\n                        gridCopy[i][k] = gridCopy[i][k] ? 0 : 1;\n                      })\n                      setGrid(newGrid)\n                    }}\n                    style={{\n                      width: 20,\n                      height: 20,\n                      backgroundColor: grid[i][k] ? \"#227dd9\" : undefined,\n                      border: \"solid 1px black\",\n                    }}\n                />)\n        )}\n      </div>\n      <button onClick={() => {\n          setRunning(!running);\n          if (!running) {\n              runningRef.current = true;\n              runSimulation();\n          }\n      }}\n              style={{width: 100, height: 30, fontSize: 16}}\n      >\n          { running ? 'stop' : 'start' }\n      </button>\n      <button style={{width: 100, height: 30, fontSize: 16}} onClick={() => {\n          setDrawing(!drawing)\n      }}>\n          draw\n      </button>\n        <button style={{width: 100, height: 30, fontSize: 16}} onClick={() => {\n           const rows = [];\n           for (let i = 0; i < numRows; i++) {\n               rows.push(\n                   Array.from(Array(numCols), () => (Math.random() > 0.6 ? 1 : 0))\n               );\n           }\n\n           setGrid(rows);\n        }}>\n            random\n        </button>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}